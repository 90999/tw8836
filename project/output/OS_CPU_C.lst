C51 COMPILER V9.51   OS_CPU_C                                                              07/19/2013 23:42:42 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE OS_CPU_C
OBJECT MODULE PLACED IN .\output\OS_CPU_C.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE keilc51\OS_CPU_C.C LARGE OPTIMIZE(7,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\output\OS_CPU_C.lst) TABS(2) OBJECT(.\output\OS_CPU_C.obj)

line level    source

   1          /*********************************************************************************************************
   2          **                                       Small RTOS 51
   3          **                                   The Real-Time Kernel For Keil c51
   4          **
   5          **                                  (c) Copyright 2002-2003, chenmingji
   6          **                                           All Rights Reserved
   7          **
   8          **                                                  V1.20.2
   9          **
  10          **
  11          **--------------文件信息--------------------------------------------------------------------------------
  12          **文   件   名: OS_CPU_C.C
  13          **创   建   人: 陈明计
  14          **最后修改日期:  2004年4月22日
  15          **描        述: Small RTOS 51与CPU(既8051系列)相关的C语言代码
  16          **
  17          **--------------历史版本信息----------------------------------------------------------------------------
  18          ** 创建人: 陈明计
  19          ** 版  本: V0.50~v1.00
  20          ** 日　期: 2002年2月22日~2002年6月20日
  21          ** 描　述: 基本完成
  22          **
  23          **------------------------------------------------------------------------------------------------------
  24          ** 修改人: 陈明计
  25          ** 版  本: V1.10~V1.12.0
  26          ** 日　期: 2002年9月1日~002年12月30日
  27          ** 描　述: 完善代码
  28          **
  29          **------------------------------------------------------------------------------------------------------
  30          ** 修改人: 陈明计
  31          ** 版  本: V1.20.0
  32          ** 日　期: 2003年8月17日
  33          ** 描　述: 根据新版本需要增减了函数
  34          **
  35          **------------------------------------------------------------------------------------------------------
  36          ** 修改人: 陈明计
  37          ** 版  本: V1.20.2
  38          ** 日　期: 2004年4月22日
  39          ** 描　述: 修正任务删除时的一个BUG
  40          **
  41          **--------------当前版本修订------------------------------------------------------------------------------
  42          ** 修改人:
  43          ** 日　期:
  44          ** 描　述:
  45          **
  46          **------------------------------------------------------------------------------------------------------
  47          ********************************************************************************************************/
  48          
  49          #define  IN_OS_CPU_C
  50          #include "CONFIG.h"
  51          
  52          extern idata uint8 STACK[1];                    /* 堆栈起始位置,在OS_CPU_A定义 */
  53          uint8 idata * data OSTsakStackBotton[OS_MAX_TASKS + 2];/* 任务堆栈底部位置            */
  54          
C51 COMPILER V9.51   OS_CPU_C                                                              07/19/2013 23:42:42 PAGE 2   

  55          #if EN_SP2 > 0
              uint8 idata  Sp2[Sp2Space];                     /* 高级中断堆栈           */
              #endif
  58          
  59          #if OS_MAX_TASKS < 9            
  60          uint8 data OSFastSwap[1];                        /* 任务是否可以快速切换 */
  61          #else
              uint8 data OSFastSwap[2];
              #endif
  64          
  65          extern data uint16 C_XBP;
  66          
  67          void TaskIdle(void)   small;
  68          /*********************************************************************************************************
  69          ** 函数名称: OSCPUInit
  70          ** 功能描述: Small RTOS 与系统相关的初始化
  71          ** 输　入: 无
  72          ** 输　出 : 无
  73          ** 全局变量: OSTaskID,OSTsakStackBotton,SP
  74          ** 调用模块: LoadCtx
  75          ** 
  76          ** 作　者: 陈明计
  77          ** 日　期: 2002年2月22日
  78          **-------------------------------------------------------------------------------------------------------
  79          ** 修改人:
  80          ** 日　期:
  81          **-------------------------------------------------------------------------------------------------------
  82          ********************************************************************************************************/
  83                  void OSCPUInit(void)  small
  84          {
  85   1          uint8 i;
  86   1      
  87   1          for (i = 0; i < OS_MAX_TASKS + 1; i++)
  88   1          {
  89   2              OSTsakStackBotton[i] = STACK;
  90   2          }
  91   1          OSTsakStackBotton[OS_MAX_TASKS + 1] = (uint8 idata *)(IDATA_RAM_SIZE % 256);
  92   1          
  93   1      }
  94          
  95          /*********************************************************************************************************
  96          ** 函数名称: OSTaskStkInit
  97          ** 功能描述: 任务堆栈初始化
  98          ** 输　入: 无
  99          ** 输　出 : 无
 100          ** 全局变量: OSTaskID,OSTsakStackBotton,SP
 101          ** 调用模块: LoadCtx
 102          ** 
 103          ** 作　者: 陈明计
 104          ** 日　期: 2002年2月22日
 105          **-------------------------------------------------------------------------------------------------------
 106          ** 修改人:
 107          ** 日　期:
 108          **-------------------------------------------------------------------------------------------------------
 109          ********************************************************************************************************/
 110          /*
 111          #if EN_REENTRANT > 0
 112          #define SP_ADD_BYTE  5
 113          #else
 114          #define SP_ADD_BYTE  3
 115          #endif
 116          
C51 COMPILER V9.51   OS_CPU_C                                                              07/19/2013 23:42:42 PAGE 3   

 117          
 118                  void OSTaskStkInit(void (code * task)(void), void xdata *ptos, uint8 TaskID) small
 119          {
 120              uint8 i;
 121              uint8 idata * cp;
 122              uint8 idata * cp1;
 123              
 124          #if OS_MAX_TASKS < 9
 125                  OSFastSwap[1] |= OSMapTbl[TaskID];
 126          #else
 127                  if (TaskID < 8)
 128                  {
 129                      OSFastSwap[1] |= OSMapTbl[TaskID];
 130                  }
 131                  else
 132                  {
 133                      OSFastSwap[0] |= OSMapTbl[TaskID & 0x07];
 134                  }
 135          #endif
 136              
 137              if (TaskID < OSRunningTaskID())
 138              {
 139                  i =  OSRunningTaskID() - TaskID;
 140                  cp = (uint8 idata *)(&(OSTsakStackBotton[TaskID + 1]));
 141                  
 142                  do
 143                  {
 144                      *cp += SP_ADD_BYTE;
 145                      cp++;
 146                  } while (--i != 0);
 147                  
 148                  cp1 = (uint8 idata *)SP;
 149                  SP = SP + SP_ADD_BYTE;
 150                  i = SP - (uint8)(OSTsakStackBotton[TaskID + 1]);
 151                  cp = (uint8 idata *)SP;
 152                  do
 153                  {
 154                      *cp-- = *cp1--;
 155                  } while (--i != 0);
 156              }
 157              else
 158              {
 159                  cp1 = (uint8 idata *)(&(OSTsakStackBotton[OSRunningTaskID() + 1]));
 160                  
 161                  i = TaskID - OSRunningTaskID();
 162                  
 163                  do
 164                  {
 165                      *cp1 -= SP_ADD_BYTE;
 166                      cp1++;
 167                  } while (--i != 0);
 168                  
 169                  cp = OSTsakStackBotton[OSRunningTaskID() + 1];
 170                  i = OSTsakStackBotton[TaskID] - cp - SP_ADD_BYTE;
 171                  cp1 = cp - SP_ADD_BYTE;
 172                  do
 173                  {
 174                      *cp1++ = *cp++;
 175                  } while (--i != 0);
 176              }
 177              cp = OSTsakStackBotton[TaskID];
 178              *cp++ = (uint16)task % 256;
C51 COMPILER V9.51   OS_CPU_C                                                              07/19/2013 23:42:42 PAGE 4   

 179              *cp++ = (uint16)task / 256;
 180          #if EN_REENTRANT > 0
 181              *cp++ = (uint16)ptos / 256;
 182              *cp++ = (uint16)ptos % 256;
 183          #endif
 184              *cp = 0;
 185          }
 186              */
 187          
 188          
 189          /*********************************************************************************************************
 190          ** 函数名称: OSTaskStkDel
 191          ** 功能描述: 任务堆栈删除
 192          ** 输　入: 无
 193          ** 输　出 : 无
 194          ** 全局变量: OSTaskID,OSTsakStackBotton,SP
 195          ** 调用模块: LoadCtx
 196          ** 
 197          ** 作　者: 陈明计
 198          ** 日　期: 2003年8月17日
 199          **-------------------------------------------------------------------------------------------------------
 200          ** 修改人: 陈明计
 201          ** 日　期: 2004年4月22日
 202          **-------------------------------------------------------------------------------------------------------
 203          ********************************************************************************************************/
 204          
 205                  void StkDelA(uint8 TaskID)
 206          {
 207   1          uint8 idata *cp;
 208   1          uint8 idata *cp1;
 209   1          uint8 temp, i;
 210   1          
 211   1          cp = OSTsakStackBotton[TaskID];
 212   1          cp1 = OSTsakStackBotton[TaskID + 1];
 213   1          temp = cp1 - cp;
 214   1          for (i = TaskID + 1; i <= OSRunningTaskID(); i++)
 215   1          {
 216   2              OSTsakStackBotton[i] -= temp;
 217   2          }
 218   1          i = SP - (uint8)(cp1) + 1;
 219   1          do
 220   1          {
 221   2              *cp++ = *cp1++;
 222   2          } while (--i != 0);
 223   1          SP = SP - temp;
 224   1      }
 225          
 226          
 227                  void StkDelB(uint8 TaskID)
 228          {
 229   1          uint8 idata *cp;
 230   1          uint8 idata *cp1;
 231   1          uint8 temp, i;
 232   1      
 233   1          cp = OSTsakStackBotton[TaskID] - 1;
 234   1          cp1 = OSTsakStackBotton[TaskID + 1] - 1;
 235   1          i = OSTsakStackBotton[TaskID] - OSTsakStackBotton[OSRunningTaskID() + 1];
 236   1          if (i != 0)
 237   1          {
 238   2              do
 239   2              {
 240   3                  *cp1-- = *cp--;
C51 COMPILER V9.51   OS_CPU_C                                                              07/19/2013 23:42:42 PAGE 5   

 241   3              } while (--i != 0);
 242   2          }
 243   1          temp = cp1 - cp;
 244   1          for (i = OSRunningTaskID() + 1; i <= TaskID; i++)
 245   1          {
 246   2              OSTsakStackBotton[i] += temp;
 247   2          }
 248   1      }
 249          
 250                  void StkDelC(uint8 TaskID)
 251          {
 252   1          uint8 idata *cp;
 253   1          extern void C_OSCtxSw(void);
 254   1          
 255   1          
 256   1          cp = OSTsakStackBotton[TaskID];
 257   1          *cp++ = (uint16)C_OSCtxSw % 256;
 258   1          *cp = (uint16)C_OSCtxSw / 256;
 259   1          SP = (uint8) cp;
 260   1          OSFindNextRunningTask();
 261   1      }
 262          
 263                  void OSTaskStkDel(uint8 TaskID)  small
 264          {
 265   1          uint8 temp;
 266   1      
 267   1          temp = 1;
 268   1          if (TaskID == OSRunningTaskID())
 269   1          {
 270   2              temp = 2;
 271   2          }
 272   1          else if (TaskID < OSRunningTaskID())
 273   1          {
 274   2              temp = 0;
 275   2          }
 276   1          switch (temp)
 277   1          {
 278   2              case 0:
 279   2                  StkDelA(TaskID);
 280   2                  break;
 281   2              case 1:
 282   2                  StkDelB(TaskID);
 283   2                  break;
 284   2              case 2:
 285   2                  StkDelC(TaskID);
 286   2                  break;
 287   2              default:
 288   2                  break;
 289   2          }
 290   1      }
 291          
 292          /*********************************************************************************************************
 293          ** 函数名称: OSTickISR
 294          ** 功能描述: 系统时钟中断服务函数
 295          ** 输　入: 无
 296          ** 输　出 : 无
 297          ** 全局变量: 无
 298          ** 调用模块: OS_IBT_ENTER,(UserTickTimer),OSTimeTick,OSIntExit
 299          ** 
 300          ** 作　者: 陈明计
 301          ** 日　期: 2002年2月22日
 302          **-------------------------------------------------------------------------------------------------------
C51 COMPILER V9.51   OS_CPU_C                                                              07/19/2013 23:42:42 PAGE 6   

 303          ** 修改人: 陈明计
 304          ** 日　期: 2002年10月23日
 305          **-------------------------------------------------------------------------------------------------------
 306          ** 修改人:
 307          ** 日　期:
 308          **-------------------------------------------------------------------------------------------------------
 309          ********************************************************************************************************/
 310          #pragma disable                                        /* 除非最高优先级中断，否则，必须加上这一句 */
 311          
 312          void OSTickISR(void) interrupt OS_TIME_ISR
 313          {
 314   1      #if TICK_TIMER_SHARING > 1 
                  static uint8 TickSum = 0;
              #endif
 317   1      
 318   1      #if EN_USER_TICK_TIMER > 0 
                  UserTickTimer();                                    /* 用户函数 */
              #endif
 321   1      
 322   1      #if TICK_TIMER_SHARING > 1 
                  TickSum = (TickSum + 1) % TICK_TIMER_SHARING;
                  if (TickSum != 0)
                  {
                      return;
                  }
              #endif
 329   1      
 330   1          OS_INT_ENTER();                                     /* 中断开始处理 */
 331   1      
 332   1      #if EN_TIMER_SHARING > 0
 333   1          OSTimeTick();                                       /* 调用系统时钟处理函数 */
 334   1      #else
                  OSIntSendSignal(TIME_ISR_TASK_ID);                  /* 唤醒ID为TIME_ISR_TASK_ID的任务 */
              #endif
 337   1          
 338   1          OSIntExit();                                        /* 中断结束处理 */
 339   1      }
 340          
 341          /*********************************************************************************************************
 342          **                            End Of File
 343          ********************************************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    286    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
